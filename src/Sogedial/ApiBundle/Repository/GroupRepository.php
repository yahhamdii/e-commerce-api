<?php

namespace Sogedial\ApiBundle\Repository;

use Doctrine\ORM\QueryBuilder;
use Sogedial\ApiBundle\Entity\GroupItem;
use Sogedial\OAuthBundle\Entity\UserCustomer;
use Sogedial\OAuthBundle\Entity\UserAdmin;
use Sogedial\OAuthBundle\Entity\UserCommercial;
use Sogedial\OAuthBundle\Entity\UserSuperAdmin;



/**
 * GroupRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class GroupRepository extends EntityRepository
{
    protected $alias = 'g';

    public function findBy(array $filter, array $orderBy = null, $limit = null, $offset = null, $type = null)
    {

        $qb = $this->createFindByQueryBuilder($filter, $orderBy, $limit, $offset, $type);

        $qb = $this->addTypeQueryPart($qb, $type);
        
        $this->getAcl($qb, $type);      

        return $qb->getQuery()->getResult();
    }

    public function processCriteria($qb, $filter)
    {
        $sanitizedFilter = $filter;
        unset($sanitizedFilter['client']);
        parent::processCriteria($qb, $sanitizedFilter);
    }

    protected function getAcl(QueryBuilder $qb, $type): void
    {
        $user = $this->getTokenStorage()->getToken()->getUser();

        if($type !== "item" && !$user instanceof UserSuperAdmin){
            throw new \Sogedial\ApiBundle\Exception\ForbiddenException;
        }
        
        if ($user instanceof UserCustomer) {
            $qb->join('gi.groupClients', 'groupClients');
            $qb->join('groupClients.clients', 'clients', 'WITH', $qb->expr()->eq('clients', ':client'));
            $qb->setParameter('client', $user->getClient());
            $qb->andWhere(
                $qb->expr()->orX(
                    $qb->expr()->gte('gi.dateEnd', 'CURRENT_TIMESTAMP()'),
                    $qb->expr()->isNull('gi.dateEnd')
                )                
            )
            ->andWhere('gi.enabled = :active ')
            ->setParameter('active', true);
        }      
        if ($user instanceof UserCommercial || $user instanceof UserAdmin) {
            $qb->andWhere('gi.platform = :platform')
                ->setParameter('platform', $user->getPlatform());
        }
    }

    protected function addSpecificQuery(array $filter, QueryBuilder $qb, $type)
    {
        if ($type === 'item') {
            if (isset($filter['client'])) {
                $qb->join('gi.groupClients', 'groupClients')
                    ->join('groupClients.clients', 'clients', 'WITH', $qb->expr()->eq('clients', ':client'))
                    ->setParameter('client', $filter['client']);
            }
        }
    }


    protected function createFindByQueryBuilder(array $filter, array $orderBy = null, $limit = null, $offset = null, $type = null)
    {

        $qb = parent::createFindByQueryBuilder($filter, $orderBy, $limit, $offset);

        if ($type == 'item') {
            $qb->join(GroupItem::class, 'gi', 'WITH', $qb->expr()->eq($this->alias . '.id', 'gi.id'));
        }

        $this->addSpecificQuery($filter, $qb, $type);

        return $qb;
    }
}